### YamlMime:Tutorial
title: Verwenden formatierter Zeichenfolgen mit der Zeichenfolgeninterpolation
metadata:
  title: Zeichenfolgeninterpolation – Interaktives C#-Tutorial
  description: In diesem Tutorial verwenden Sie Ihren Browser, um das Zeichenfolgeninterpolationsfeature in C# interaktiv kennenzulernen. Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 5490176d91a6ed900471e33af6adce1fa3e62d8f
  ms.sourcegitcommit: a3db1a9eafca89f95ccf361bc1833b47fbb2bb30
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 04/04/2019
  ms.locfileid: "58921380"
items:
- durationInMinutes: 2
  content: >
    In diesem Tutorial wird erläutert, wie Sie die [Zeichenfolgeninterpolation](../../language-reference/tokens/interpolated.md) verwenden können, um Werte in eine einzige Zeichenfolge einzufügen. Sie lernen auch, wie Sie die Textformatierung der Ergebniszeichenfolge steuern können. Verwenden Sie Ihren Browser zum Schreiben und Ausführen von C#-Code. Dort werden Ihnen unmittelbar die Ergebnisse angezeigt.
- title: Erstellen einer interpolierten Zeichenfolge
  durationInMinutes: 2
  content: >
    Führen Sie den folgenden Code im interaktiven Fenster aus. Geben Sie hierfür den Code in das interaktive Fenster ein (ersetzen Sie `<name>` mit Ihrem Namen), und klicken Sie auf die Schaltfläche **Ausführen**:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Wenn Sie den Code ausführen, zeigt die **Ausgabe** eine Zeichenfolge an, die Ihren Namen in der Begrüßung enthält. Das Zeichenfolgenargument des Methodenaufrufs <xref:System.Console.WriteLine%2A> ist eine *interpolierte Zeichenfolge*. Dabei handelt es sich um eine Vorlage, durch die Sie eine einzelne Zeichenfolge (als *Ergebniszeichenfolge* bezeichnet) aus einer Zeichenfolge erstellen können, die eingebetteten Code enthält. Interpolierte Zeichenfolgen sind besonders nützlich für das Einfügen von Werten in eine Zeichenfolge oder zum Verketten (bzw. Verknüpfen) von mehreren Zeichenfolgen.


    Das obige Beispiel enthält die zwei Elemente, über die jede interpolierte Zeichenfolge verfügen muss:


    - Ein Zeichenfolgenliteral, das ein `$`-Zeichen vor dem öffnenden Anführungszeichen enthält. Zwischen dem `$`-Symbol und dem Anführungszeichen darf kein Leerraum vorhanden sein. (Wenn Sie sehen möchten, was geschieht, wenn Sie einen Leerzeichen einfügen, fügen Sie nach dem `$`-Zeichen im interaktiven Fenster eins ein, und führen Sie dann den Code aus. Dann gibt der C#-Compiler den Fehler „Unerwartetes Zeichen ‚$‘“ zurück.)


    - Mindestens ein *interpolierter Ausdruck*. Ein interpolierter Ausdruck wird durch eine öffnende und eine schließende Klammer (`{` und `}`) angegeben. Sie können jeden C#-Ausdruck in die Klammern einfügen, der einen Wert (einschließlich `null`) zurückgibt.


    Im Folgenden finden Sie weitere Beispiele für die Zeichenfolgeninterpolation mit einigen anderen Datentypen.


    > [!NOTE]

    > Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).
- title: Einschließen verschiedener Datentypen
  durationInMinutes: 5
  content: >
    Im vorherigen Schritt haben Sie die Zeichenfolgeninterpolation verwendet, um eine Zeichenfolge in eine andere einzufügen. Das Ergebnis eines interpolierten Ausdrucks kann jedoch jeden Datentyp aufweisen. Im Folgenden werden mehrere Datentypen in eine interpolierte Zeichenfolge einbezogen.


    Im folgenden Beispiel wird zunächst ein [Klassen](../../programming-guide/classes-and-structs/classes.md)-Datentyp `Vegetable` definiert, der über die [Eigenschaft](../../properties.md) `Name` und die [Methode](../../methods.md) `ToString` verfügt. Diese Methode [überschreibt](../../language-reference/keywords/override.md) das Verhalten der <xref:System.Object.ToString?displayProperty=nameWithType>-Methode. Der [`public`-Zugriffsmodifizierer](../../language-reference/keywords/public.md) stellt diese Methode jedem Clientcode zur Verfügung, um die Zeichenfolgendarstellung einer `Vegetable`-Instanz abzurufen. Im Beispiel gibt die Methode `Vegetable.ToString` den Wert der Eigenschaft `Name` zurück, die beim [Konstruktor](../../programming-guide/classes-and-structs/constructors.md) `Vegetable` initialisiert wird: `Vegetable(string name) => Name = name;`. Dann erstellen wir eine Instanz der Klasse `Vegetable` namens `item`, indem wir das [`new`-Schlüsselwort](../../language-reference/keywords/new-operator.md) verwenden und einen Namen für den Konstruktor `Vegetable` angeben. Letztendlich wird diese Instanz in einer interpolierten Zeichenfolge enthalten, die auch einen <xref:System.DateTime>-Wert, <xref:System.Decimal>-Wert und einen [Enumerationswert](../../programming-guide/enumeration-types.md) `Unit` enthält. Führen Sie den folgenden Code im interaktiven Fenster aus:


    ```csharp

    public class Vegetable

    {
       public Vegetable(string name) => Name = name;

       public string Name { get; }

       public override string ToString() => Name;
    }


    public enum Unit { item, kilogram, gram, dozen };


    var item = new Vegetable("eggplant");

    var date = DateTime.Now;

    var price = 1.99m;

    var unit = Unit.item;

    Console.WriteLine($"On {date}, the price of {item} was {price} per {unit}.");

    ```


    Beachten Sie, dass der interpolierte Ausdruck `item` in der interpolierten Zeichenfolge zu dem Text „eggplant“ in der Ergebniszeichenfolge aufgelöst wird. Dies liegt daran, dass der Ausdruckergebnistyp keine Zeichenfolge ist. Daher wird das Ergebnis auf folgende Weise zu einer Zeichenfolge aufgelöst:


    - Wenn der interpolierte Ausdruck `null` ergibt, wird eine leere Zeichenfolge („“ oder <xref:System.String.Empty?displayProperty=nameWithType>) verwendet.


    - Wenn der interpolierte Ausdruck nicht `null` ergibt, wird in der Regel die Methode `ToString` des Ergebnistyps aufgerufen. Sie können dies testen, indem Sie die Implementierung der Methode `Vegetable.ToString` aktualisieren. Sie müssen die Methode `ToString` nicht einmal implementieren, da jeder Typ auf die eine oder andere Art über eine Implementierung dieser Methode verfügt. Sie können dies testen, indem Sie die Definition der Methode `Vegetable.ToString` im Beispiel auskommentieren (fügen Sie hierzu davor ein Kommentarsymbol `//` ein). In der Ausgabe wird die Zeichenfolge „eggplant“ durch den vollqualifizierten Typnamen (der neben dem Typnamen von der C#-REPL definierte Namespace) ersetzt. Dabei handelt es sich um das Standardverhalten der <xref:System.Object.ToString?displayProperty=nameWithType>-Methode. Das Standardverhalten der Methode `ToString` für einen Enumerationswert besteht darin, die Zeichenfolgendarstellung eines Werts zurückzugeben.


    Bei der Ausgabe dieses Beispielcodes ist das Datum zu genau angegeben (der Preis von Auberginen ändert sich nicht sekündlich), und der Wert der Variablen „price“ gibt keine Währungsinformation an. Im nächsten Schritt erfahren Sie, wie Sie diese Probleme beheben, indem Sie das Format der Zeichenfolgendarstellung der Ergebnisse des Ausdrucks steuern.


    > [!NOTE]

    > Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).
- title: Steuern der Formatierung von interpolierten Ausdrücken
  durationInMinutes: 5
  content: >
    Im vorherigen Schritt wurden zwei fehlerhaft formatierte Zeichenfolgen in die Ergebniszeichenfolge eingefügt. Bei einer davon handelte es sich um einen Datums- und Uhrzeitwert, bei dem nur das Datum relevant war. Bei der zweiten handelte es sich um einen Preis, bei dem keine Währungseinheit angegeben wurde. Beide Probleme sind einfach zu beheben. Mithilfe der Zeichenfolgeninterpolation können Sie *Formatzeichenfolgen* angeben, die die Formatierung bestimmter Typen steuern. Ändern Sie den Aufruf von `Console.WriteLine` im vorherigen Beispiel, damit die Formatzeichenfolgen für die Ausdrücke „date“ und „price,“ wie in der folgenden Zeile dargestellt, enthalten sind:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    Sie können eine Formatzeichenfolge angeben, indem Sie dem interpolierten Ausdruck einen Doppelpunkt („:“) und die Formatzeichenfolge anfügen. Bei „d“ handelt es sich um eine [Zeichenfolge für das Standardformat für Datum und Uhrzeit](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier), die das kurze Datumsformat darstellt. Bei „C2“ handelt es sich um eine [Zeichenfolge für das numerische Standardformat](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier), die eine Zahl als Währungswert mit zwei Ziffern nach dem Dezimaltrennzeichen darstellt.


    Einige Typen in den .NET-Bibliotheken unterstützen einen vordefinierten Satz von Formatzeichenfolgen. Darin sind alle numerischen Typen sowie alle Datums- und Uhrzeittypen enthalten. Eine vollständige Liste der Typen, die Formatzeichenfolgen unterstützen, finden Sie im Artikel [Formatieren von Typen in .NET](../../../standard/base-types/formatting-types.md) unter [Format Strings and .NET Class Library Types (Formatzeichenfolgen und .NET-Klassenbibliothekstypen)](../../../standard/base-types/formatting-types.md#stringRef).


    Versuchen Sie, die Formatzeichenfolgen im Beispiel zu verändern, um zu sehen, welche Auswirkungen sie auf die Formatierung des Datums, der Zeit und des numerischen Werts haben. Ändern Sie „d“ in `{date:d}` in „t“ (um das kurze Uhrzeitformat anzuzeigen) sowie in „y“ (um das Jahr und den Monat anzuzeigen) und in „yyyy“ (um das Jahr als vierstellige Zahl anzuzeigen). Ändern Sie „C2“ in `{price:C2}` in „e“ (für die Exponentialschreibweise) und in „F3“ (für einen numerischen Wert mit drei Ziffern nach dem Dezimaltrennzeichen).


    Sie können zusätzlich zum Steuern der Formatierung auch die Feldbreite und die Ausrichtung der formatierten Zeichenfolgen steuern, die in der Ergebniszeichenfolge enthalten sind. Im nächsten Schritt erfahren Sie mehr zu diesem Thema.


    > [!NOTE]

    > Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).
- title: Steuern der Feldbreite und der Ausrichtung von interpolierten Ausdrücken
  durationInMinutes: 6
  content: >
    Wenn das Ergebnis eines interpolierten Ausdrucks als Zeichenfolge formatiert wird, wird diese Zeichenfolge normalerweise in eine Ergebniszeichenfolge ohne führende oder nachgestellte Leerzeichen einbezogen. Die Feldbreite und Ausrichtung des Texts steuern zu können, ist insbesondere bei der Arbeit mit Daten hilfreich, um eine besser lesbare Ausgabe zu erzeugen. Wenn Ihnen dies angezeigt werden soll, führen Sie den folgenden Code aus:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Die Elementnamen sind linksbündig ausgerichtet. Die Mengen sind rechtsbündig ausgerichtet. Sie können die Ausrichtung festlegen, indem Sie einem interpolierten Ausdruck ein Komma („,“) anfügen und die *minimale* Feldbreite angeben. Wenn der angegebene Wert eine positive Zahl ist, wird das Feld rechtsbündig ausgerichtet. Wenn er eine negative Zahl ist, wird das Feld linksbündig ausgerichtet.


    Versuchen Sie die negativen Vorzeichen aus dem Code `{"Item",-25}` und `{item.Key,-25}` zu entfernen, und führen Sie das Beispiel erneut aus. In diesem Fall sind die Elementnamen rechtsbündig ausgerichtet.


    Sie können einen Ausrichtungsspezifizierer und eine Formatzeichenfolge für einen einzigen interpolierten Ausdruck kombinieren. Geben Sie dazu zunächst die Ausrichtung gefolgt von einem Doppelpunkt und der Formatzeichenfolge an. Testen Sie den folgenden Code, der drei formatierte Zeichenfolgen mit definierten Feldbreiten darstellt:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).
- content: >-
    Sie haben das interaktive Tutorial für die Zeichenfolgeninterpolation abgeschlossen. Klicken sie unten auf den Link **Sammlungen in C#**, um das nächste interaktive Tutorial zu starten, oder besuchen sie die [.NET-Website](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial), um das .NET Core SDK herunterzuladen, ein Projekt auf Ihrem Computer zu erstellen und weiter zu programmieren. Über den Schritt „Weiterlernen“ gelangen Sie wieder zu diesen Tutorials.


    Weitere Informationen finden Sie unter [Zeichenfolgeninterpolation](../../language-reference/tokens/interpolated.md).
